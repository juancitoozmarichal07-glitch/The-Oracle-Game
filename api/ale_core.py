# ale_core.py (Versi√≥n con Depuraci√≥n para Render)
import traceback # <-- Movido al principio por buena pr√°ctica

class ALE_Core:
    def __init__(self):
        self._skillsets = {}
        print("‚úÖ Motor A.L.E. Core v1.0 (Arquitectura Original) inicializado.")

    def cargar_skillset(self, nombre, instancia_skillset):
        self._skillsets[nombre] = instancia_skillset
        print(f"    -> Skillset '{nombre}' cargado en el motor.")

    async def procesar_peticion(self, datos_peticion):
        # ===================================================================
        # ===                MICR√ìFONOS DE DEPURACI√ìN                   ===
        # ===================================================================
        print("\n--- [ALE_CORE_DEBUG] INICIO DE PETICI√ìN ---") # Micr√≥fono 1
        print(f"[ALE_CORE_DEBUG] Datos recibidos: {datos_peticion}") # Micr√≥fono 2
        
        nombre_skillset = datos_peticion.get("skillset_target")
        skillset_seleccionado = self._skillsets.get(nombre_skillset)

        if not skillset_seleccionado:
            print(f"üö® [ALE_CORE_DEBUG] Skillset '{nombre_skillset}' no encontrado.") # Micr√≥fono 3
            return {"error": f"Skillset '{nombre_skillset}' no encontrado."}
        
        print(f"[ALE_CORE_DEBUG] Skillset '{nombre_skillset}' encontrado. Ejecutando...") # Micr√≥fono 4
        
        try:
            # Simplemente llamamos a la funci√≥n ejecutar de la instancia
            resultado = await skillset_seleccionado.ejecutar(datos_peticion)
            print("[ALE_CORE_DEBUG] Ejecuci√≥n completada con √©xito.") # Micr√≥fono 5
            return resultado
        except Exception as e:
            # Tu bloque de traceback, que es perfecto, se mantiene.
            print(f"üö® ERROR CR√çTICO en la ejecuci√≥n del skillset '{nombre_skillset}':")
            traceback.print_exc() 
            return {"error": f"Error interno en el skillset '{nombre_skillset}': {str(e)}"}

